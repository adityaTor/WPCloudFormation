
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC with a public & private subnet, and a Ec2 instance in public subnet",
  "Parameters": {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    }
  },

  "Resources": {
    "TVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock": "172.31.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": "TVPC"
    },

    "GatewayAttachment": { 
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": ["TVPC","InternetGateway"],
      "Properties": {
        "VpcId": {"Ref": "TVPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },

    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "172.31.0.0/20",
        "VpcId": {"Ref": "TVPC"},
        "MapPublicIpOnLaunch": "true"
      }
    },

    "PublicRouteTable": {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn": "GatewayAttachment",
        "Properties" : {
          "VpcId" : { "Ref" : "TVPC" }
         }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayAttachment",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },

    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": "GatewayAttachment",
      "Properties" : {
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "SubnetId": {"Ref": "PublicSubnet"}
      }
    },

    "SecurityWebGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "Web Server Group",
        "GroupDescription": "Traffic Flow",
        "VpcId": {"Ref": "TVPC"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },

          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },

          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }

        ]
      }
    },

    "WebServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId" : "ami-2d39803a",
        "SecurityGroupIds": [{"Ref":"SecurityWebGroup"}],
        "InstanceType": "t2.small",
        "SubnetId": {"Ref":"PublicSubnet"},
        "KeyName": {"Ref": "KeyName"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                      "#!/bin/bash -e\n",
                      "sudo apt-get update && sudo apt-get install -y heat-cfntools\n",
                      "sudo apt-get -y install software-properties-common\n",
                      "sudo apt-get install -y git\n",
                      "sudo apt-get install -y python-pip\n",
                      "sudo pip install --upgrade pip\n",
                      "sudo pip install --upgrade setuptools\n",
                      "sudo apt-get -y install libffi-dev libssl-dev\n",
                      "sudo pip install ansible\n",
                      "cd /tmp && git clone https://github.com/adityaTor/Wordpress-Ansible.git\n",
                      "cd /tmp/Wordpress-Ansible && ansible-playbook playbook.yml\n",
                      "cd /tmp/UbuntuAnsible && ansible-playbook playbook.yml\n"
    ]]}}
      }
    }



  }
}
  